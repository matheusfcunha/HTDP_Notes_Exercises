;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname Exercise_314) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp") (lib "abstraction.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp") (lib "abstraction.rkt" "teachpack" "2htdp")) #f)))
; Exercise 314 https://htdp.org/2018-01-06/Book/part_four.html#%28counter._%28exercise._ex~3afamily-forest1%29%29

;-----------------------------------
; CONSTANTS
;-----------------------------------

;-----------------------------------
; DATA DEFINITIONS

; A [List-of ITEM] is one of: 
; – '() 
; – (cons ITEM [List-of ITEM])
; Interpretation: A list of given ITEM.

(define-struct no-parent [])
(define NP (make-no-parent))
(define-struct child [father mother name date eyes])
; An FT (short for family tree) is one of: 
; – NP
; – (make-child FT FT String N String)

; An FF (short for family forest) is a:
; [List-of FT]
; interpretation a family forest represents several
; families (say, a town) and their ancestor tree


;-----------------------------------

;-----------------------------------
; DATA DEFINITIONS EXAMPLES

; FT (Family Tree):
; Oldest Generation:
(define Carl (make-child NP NP "Carl" 1926 "green"))
(define Bettina (make-child NP NP "Bettina" 1926 "green"))
; Middle Generation:
(define Adam (make-child Carl Bettina "Adam" 1950 "hazel"))
(define Dave (make-child Carl Bettina "Dave" 1955 "black"))
(define Eva (make-child Carl Bettina "Eva" 1965 "blue"))
(define Fred (make-child NP NP "Fred" 1966 "pink"))
; Youngest Generation: 
(define Gustav (make-child Fred Eva "Gustav" 1988 "brown"))

; FF (Family Forest):
(define ff1 (list Carl Bettina))
(define ff2 (list Fred Eva))
(define ff3 (list Fred Eva Carl))

;-----------------------------------

;-----------------------------------
; FUNCTIONS

; FT -> Number
; Consumes a family tree and counts the child structures in the tree.
(check-expect (count-persons Carl)  1)
(check-expect (count-persons Adam)  3)
(check-expect (count-persons Gustav) 5)
(define (count-persons an-ftree)
  (cond
    [(no-parent? an-ftree) 0] 
    [else (+ (count-persons (child-father an-ftree))
             (count-persons (child-mother an-ftree))
             1
           )]))

; FT Number -> Number
; consumes a family tree and the current year. It produces the average age of all child structures in the family tree.
(check-expect (average-age NP 2018) 0)
(check-expect (average-age Carl 2018) 92)
(check-expect (average-age Adam 2018) 84)
(check-expect (average-age Eva 2018) 79)
(check-expect (average-age Fred 2018) 52)
(define (average-age an-ftree current-year)
    (cond
    [(no-parent? an-ftree) 0]
    [else (/ (+ (average-age (child-father an-ftree) current-year) 
                (average-age (child-mother an-ftree) current-year) 
                (- current-year (child-date an-ftree))) 
             (count-persons an-ftree))]))

; FT -> Boolean
; does an-ftree contain a child
; structure with "blue" in the eyes field
(check-expect (blue-eyed-child? Carl) #false)
(check-expect (blue-eyed-child? Gustav) #true)
(define (blue-eyed-child? an-ftree)
  (cond
    [(no-parent? an-ftree) #false] 
    [else (or (string=? (child-eyes an-ftree) "blue")
              (blue-eyed-child? (child-father an-ftree))
              (blue-eyed-child? (child-mother an-ftree)))]))


; FF -> Boolean
; does the forest contain any child with "blue" eyes
(check-expect (blue-eyed-child-in-forest? ff1) #false)
(check-expect (blue-eyed-child-in-forest? ff2) #true)
(check-expect (blue-eyed-child-in-forest? ff3) #true)
(define (blue-eyed-child-in-forest? a-forest)
  (ormap blue-eyed-child? a-forest))

; FF N -> N
; It consumes a family forest and a year (N). From this data, it produces the average age of all child instances in the forest.
(define (average-age-ff ff year)
  (local (
          ; step 1 calc the average and sum 
          ; FT N -> N
          (define (calc-average ft acumulator)
            (+ (average-age ft year) acumulator))
          
         ; step 2 divide the average by ff length
          (define average-result (/ (foldr calc-average 0 ff) (length ff)))

          
          )
    average-result
    ))
;-----------------------------------
