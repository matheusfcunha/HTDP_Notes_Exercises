;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname Exercise_104) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp")) #f)))
; Exercise 104 https://htdp.org/2018-01-06/Book/part_one.html#%28counter._mix._%28exercise._mix-vehicle%29%29

;Your home town manages a fleet of vehicles: automobiles, vans, buses, and SUVs. Develop a data representation for vehicles. The representation of each vehicle must describe the number of passengers that it can carry, its license plate number, and its fuel consumption (miles per gallon). Develop a template for functions that consume vehicles. 




(define-struct vehicle-info [number-of-passengers license-number consumption])
; VehicleInfo is a structure (make-vehicle-info Number Number Number)
; (make-vehicle-info p l c) interpretation is:
; p: Number of maximum passengers on the vehicle.
; l: it's license plate number.
; c: it's fuel consumption in miles per gallon.


(define-struct vehicles [automobile van bus suv])
; Vehicles is a structure (make-vehicle VehicleInfo VehicleInfo VehicleInfo VehicleInfo)
; interpretation is, fleet of vehicles, each with their respective information.


; Vehicles -> ???
; Template for functions that consume 'Vehicles'
(define (fn v)
  ...(vehicles-automobile)...
  ...(vehicles-van)...
  ...(vehicles-bus)...
  ...(vehicles-suv)...
  
  ...(fn2 vehicles-automobile vehicles-van vehicles-bus vehicles-suv)...            ; the design recipe suggests that if pieces of data come with their own data definition, we are to consider defining helper (auxiliary) functions and to use those to compute the result:
  )

; VehicleInfo -> ???
; Template for (fn v) function.
(define (fn2 v1 v2 v3 v4)
  ...(vehicle-info number-of-passengers v1)...
  ...(vehicle-info license-number v1)...
  ...(vehicle-info consumption v1)...
  ...(vehicle-info number-of-passengers v2)...
  ...(vehicle-info license-number v2)...
  ...(vehicle-info consumption v2)...
  ...(vehicle-info number-of-passengers v3)...
  ...(vehicle-info license-number v3)...
  ...(vehicle-info consumption v3)...
  ...(vehicle-info number-of-passengers v4)...
  ...(vehicle-info license-number v4)...
  ...(vehicle-info consumption v4)...
  )